{
    "name": "Moonlight",
    "author": "Mauro Reis Vieira <mauroreisvieira@gmail.com>",
    "variables": {
        "cursor": "#67d2ff",
        "foreground": "#bfcdf4",
        "background": "#212339",
        "comments": "#637777",
        "blue": "#82aaff",
        "brown": "#c17e70",
        "cyan": "#50c4fa",
        "green": "#c3e88d",
        "orange": "#ff966c",
        "pink": "#fca7ea",
        "purple": "#c099ff",
        "red": "#ff757f",
        "yellow": "#ffc777",
        "invalid": "#d46c6c66",
        "diffAdded": "#addb67",
        "diffModified": "#e2b93d",
        "diffDeleted": "#ef5350"
    },
    "globals": {
        "active_guide": "var(cyan)",
        "background": "var(background)",
        "block_caret": "var(cursor)",
        "caret": "var(cursor)",
        "find_highlight": "var(yellow)",
        "find_highlight_foreground": "var(background)",
        "fold_marker": "var(yellow)",
        "foreground": "var(foreground)",
        "gutter": "var(background)",
        "gutter_foreground": "color(var(foreground) alpha(0.2))",
        "highlight": "var(yellow)",
        "inactive_selection": "color(var(cyan) alpha(0.1))",
        "invisibles": "color(var(foreground) alpha(0.3))",
        "line_diff_added": "var(diffAdded)",
        "line_diff_deleted": "var(diffDeleted)",
        "line_diff_modified": "var(diffModified)",
        "line_diff_width": "2",
        "rulers": "color(var(foreground) alpha(0.5))",
        "line_highlight": "color(var(foreground) alpha(0.1))",
        "misspelling": "var(red)",
        "selection": "color(var(foreground) alpha(0.10))",
        "selection_border": "var(cyan)",
        "selection_corner_radius": "cut",
        "selection_corner_style": "cut",
        "shadow": "color(var(background) alpha(0.5))",
        "stack_guide": "var(brown)",
        "tags_options": "underline",
        "tags_foreground": "var(cyan)",
        "brackets_options": "underline",
        "brackets_foreground": "var(cyan)",
        "bracket_contents_options": "underline",
        "bracket_contents_foreground": "var(yellow)"
    },
    "rules": [
        {
            "name": "Comment",
            "scope": "comment, punctuation.definition.comment",
            "foreground": "var(comments)",
            "font_style": "italic"
        },
        {
            "name": "Class",
            "scope": "meta.export.default meta.class storage.type.class,meta.class storage.type.class,meta.interface storage.type.interface",
            "foreground": "var(purple)"
        },
        {
            "name": "Entity Name",
            "scope": "meta.export meta.class entity.name.class,meta.class entity.name.class,meta.class entity.name.type.class",
            "foreground": "var(yellow)"
        },
        {
            "name": "Interface Name",
            "scope": "meta.interface entity.name.type.interface",
            "foreground": "var(yellow)"
        },
        {
            "name": "Function Call",
            "scope": "meta.function-call.constructor variable.type,meta.export meta.object-literal meta.function meta.block meta.function-call.constructor variable.type,meta.export meta.object-literal meta.object-literal meta.function meta.block meta.function-call.constructor variable.type,meta.catch meta.block meta.function-call.constructor variable.type,meta.function-call meta.group meta.function meta.block meta.function meta.block meta.function-call.constructor variable.type,meta.try meta.block meta.function-call.constructor variable.type,meta.class meta.block meta.function meta.block meta.function-call.constructor variable.type",
            "foreground": "var(yellow)"
        },
        {
            "name": "Declaration",
            "scope": "meta.interface storage.modifier,meta.export.default meta.class meta.method.declaration storage.modifier,meta.class storage.modifier",
            "foreground": "var(purple)"
        },
        {
            "name": "Inherited",
            "scope": "meta.interface entity.other.inherited-class,meta.class meta.path entity.other.inherited-class,meta.class entity.other.inherited-class",
            "foreground": "var(orange)"
        },
        {
            "name": "Number, Constant, Function Argument, Tag Attribute, Embedded",
            "scope": "constant.numeric,constant.language,support.constant,constant.character,constant.escape,keyword.other.unit,keyword.other",
            "foreground": "var(pink)"
        },
        {
            "name": "Variable",
            "scope": "variable.member",
            "foreground": "var(red)"
        },
        {
            "name": "Operator, Misc",
            "scope": "keyword.control,constant.other.color,punctuation.definition.tag,punctuation,punctuation.separator.inheritance.php,punctuation.definition.tag.html,punctuation.definition.tag.begin.html,punctuation.definition.tag.end.html,punctuation.section.embedded,keyword.other.template",
            "foreground": "var(cyan)"
        },
        {
            "name": "Storage",
            "scope": "storage, storage.type",
            "foreground": "var(purple)"
        },
        {
            "name": "String",
            "scope": "string",
            "foreground": "var(green)"
        },
        {
            "name": "Invalid",
            "scope": "invalid,invalid.illegal",
            "foreground": "var(invalid)"
        },
        {
            "name": "Console",
            "scope": "support.function.console.",
            "foreground": "var(blue)",
            "font_style": "normal"
        },
        {
            "name": "[Diff] Deleted",
            "scope": "diff.deleted,diff.deleted.char",
            "background": "color(var(red) alpha(0.08))",
            "foreground": "var(red)"
        },
        {
            "name": "[Diff] Insert",
            "scope": "diff.inserted,diff.inserted.char",
            "background": "color(var(green) alpha(0.08))",
            "foreground": "var(green)"
        },
        {
            "name": "[CSS] String",
            "scope": "source.css string",
            "foreground": "var(green)"
        },
        {
            "name": "[CSS] Classes",
            "scope": "entity.other.attribute-name.class",
            "foreground": "var(purple)"
        },
        {
            "name": "[CSS] Tag",
            "scope": "entity.name.tag.css,source.stylus meta.selector.stylus entity.name.tag.stylus",
            "foreground": "var(yellow)"
        },
        {
            "name": "[CSS] ID",
            "scope": "entity.other.attribute-name.id.css,source.stylus meta.selector.stylus entity.other.attribute-name.id.stylus",
            "foreground": "var(red)"
        },
        {
            "name": "[CSS] Properties",
            "scope": "source.css support.type,source.sass support.type,source.scss support.type,source.less support.type,source.stylus",
            "foreground": "var(foreground)"
        },
        {
            "name": "[CSS] Variable",
            "scope": "source.scss variable.declaration.sass,support.type.custom-property.css,support.type.custom-property.scss,variable.other.sass,variable.other.scss,variable.other.stylus,source.stylus variable.other.property.stylus",
            "foreground": "var(brown)"
        },
        {
            "name": "[CSS] Properties Value",
            "scope": "support.constant.property-value.css,source.stylus constant.property-value.stylus,source.stylus keyword.language.function.misc.stylus",
            "foreground": "var(orange)"
        },
        {
            "name": "[CSS] Constant Numeric",
            "scope": "constant.numeric.css,source.stylus constant.numeric.stylus",
            "foreground": "var(orange)"
        },
        {
            "name": "[CSS] Prefix",
            "scope": "support.type.vendor-prefix.css",
            "foreground": "var(blue)"
        },
        {
            "name": "[CSS] Property Name",
            "scope": "meta.property-name.css,source.stylus meta.property-name.stylus support.type.property-name.stylus",
            "foreground": "var(foreground)"
        },
        {
            "name": "[CSS] Tag",
            "scope": "source.css entity.name.tag.custom.css",
            "foreground": "var(red)"
        },
        {
            "name": "[CSS] Pseudo Class",
            "scope": "entity.other.pseudo-class.css,source.stylus meta.selector.stylus entity.other.attribute-name.pseudo-class.stylus,source.stylus meta.selector.stylus entity.other.attribute-name.pseudo-element.stylus",
            "foreground": "var(red)",
            "font_style": "italic"
        },
        {
            "name": "[CSS] Pseudo Element",
            "scope": "entity.other.pseudo-element.css",
            "foreground": "var(red)",
            "font_style": "italic"
        },
        {
            "name": "[CSS] Unit",
            "scope": "keyword.other.unit.css,source.stylus constant.numeric.stylus keyword.other.unit.stylus",
            "foreground": "var(orange)"
        },
        {
            "name": "[CSS] Font Name",
            "scope": "support.constant.font-name.css",
            "foreground": "var(pink)"
        },
        {
            "name": "[CSS] Color Values",
            "scope": "support.constant.color.w3c-standard-color-name.css,constant.other.color.rgb-value.css,support.constant.color.w3c-extended-color-keywords.css",
            "foreground": "var(pink)"
        },
        {
            "name": "[STYLUS] Color Values",
            "scope": "source.stylus constant.other.color.rgb-value.stylus punctuation.definition.constant.stylus,source.stylus constant.color.w3c-standard-color-name.stylus,source.stylus constant.other.color.rgb-value.stylus constant.other.color.rgb-value.red.stylus,source.stylus constant.other.color.rgb-value.stylus constant.other.color.rgb-value.green.stylus,source.stylus constant.other.color.rgb-value.stylus constant.other.color.rgb-value.blue.stylus",
            "foreground": "var(pink)"
        },
        {
            "name": "[CSS] Function",
            "scope": "source.css meta.property-list.css meta.property-value.css meta.function-call.css support.function.color.css,support.function.var.css,support.function.filter.css,support.function.calc.css,support.function.gradient.css,source.css meta.property-list.css meta.property-value.css meta.function-call.css support.function.var.css",
            "foreground": "var(blue)",
            "font_style": "normal"
        },
        {
            "name": "[STYLUS] Function",
            "scope": "source.stylus meta.function-call.stylus entity.function-name.stylus,source.stylus meta.function-call.stylus entity.other.attribute-name.mixin.stylus",
            "foreground": "var(blue)",
            "font_style": "normal"
        },
        {
            "name": "[SCSS] Prefix",
            "scope": "source.scss meta.property-name.css support.type.vendor-prefix.css",
            "foreground": "var(foreground)"
        },
        {
            "name": "[STYLUS] Prefix",
            "scope": "source.stylus meta.selector.stylus variable.language.stylus",
            "font_style": "normal",
            "foreground": "var(foreground)"
        },
        {
            "name": "[SCSS | STYLUS] Function Call",
            "scope": "source.scss meta.function.declaration.sass keyword.control.at-rule.sass,source.scss meta.function.declaration.sass meta.function.parameters.sass constant.language.sass,source.css meta.at-rule.import.css keyword.control.at-rule.import.css,source.scss meta.function-call.sass variable.function.sass keyword.control.at-rule.sass,source.stylus meta.selector.stylus entity.other.attribute-name.pseudo-element.stylus puncutation.definition.entity.stylus",
            "foreground": "var(cyan)"
        },
        {
            "name": "[SCSS] Property Value",
            "scope": "source.scss meta.property-value.css meta.function-call.css support.function.custom.sass,source.scss meta.property-value.css meta.function-call.sass support.function.sass",
            "foreground": "var(blue)",
            "font_style": "normal"
        },
        {
            "name": "[GitGutter] Deleted",
            "scope": "markup.deleted.git_gutter",
            "foreground": "var(diffDeleted)"
        },
        {
            "name": "[GitGutter] Inserted",
            "scope": "markup.inserted.git_gutter",
            "foreground": "var(diffAdded)"
        },
        {
            "name": "[GitGutter] Modified",
            "scope": "markup.changed.git_gutter",
            "foreground": "var(diffModified)"
        },
        {
            "name": "[HTML] String",
            "scope": "text.html.basic string",
            "foreground": "var(green)"
        },
        {
            "name": "[HTML] Operator",
            "scope": "keyword.other.substitution",
            "foreground": "var(green)"
        },
        {
            "name": "[HTML] Attributes",
            "scope": "entity.other.attribute-name.html,entity.other.attribute-name",
            "foreground": "var(yellow)"
        },
        {
            "name": "[HTML] Tag Name",
            "scope": "entity.name.tag",
            "foreground": "var(red)"
        },
        {
            "name": "[HTML] Tag Attribute",
            "scope": "text.html.basic entity.other.attribute-name",
            "foreground": "var(purple)"
        },
        {
            "name": "[JavaScript] Constructor",
            "scope": "source.js meta.class.js meta.block.js meta.function.declaration.js storage.type.accessor.js,meta.function-call.constructor.js,entity.name.function.constructor.js,variable.language.constructor.js",
            "foreground": "var(purple)"
        },
        {
            "name": "[JavaScript] Object Key",
            "scope": "meta.object-literal.key.js",
            "foreground": "var(blue)"
        },
        {
            "name": "[JavaScript] Function",
            "scope": "variable.function,variable.annotation,entity.name.function,meta.class-method.js entity.name.function.js",
            "foreground": "var(blue)"
        },
        {
            "name": "[JavaScript] Language Library",
            "scope": "variable.language",
            "foreground": "var(red)",
            "font_style": "italic"
        },
        {
            "name": "[JavaScript] Library",
            "scope": "support.function,support.macro",
            "foreground": "var(blue)",
            "font_style": "italic"
        },
        {
            "name": "[JavaScript] Support",
            "scope": "support.type,support.class",
            "foreground": "var(yellow)"
        },
        {
            "name": "[JavaScript] Null",
            "scope": "constant.language.null.js",
            "foreground": "var(orange)"
        },
        {
            "name": "[JavaScript] Undefined",
            "scope": "constant.language.undefined.js",
            "foreground": "var(orange)"
        },
        {
            "name": "[JavaScript] Boolean",
            "scope": "source.js meta.export.js meta.binding.name.js variable.other.constant.js,constant.language.boolean.false.js,constant.language.boolean.true.js,source.js meta.export.js meta.class.js meta.block.js meta.function.js meta.block.js variable.other.constant.js",
            "foreground": "var(orange)"
        },
        {
            "name": "[JavaScript] Object",
            "scope": "source.js meta.function.declaration.js variable.parameter.function.js,source.js meta.class.js meta.block.js meta.function.js meta.block.js meta.function-call.constructor.js meta.group.js meta.object-literal.js",
            "foreground": "var(pink)"
        },
        {
            "name": "[JSON] Key ",
            "scope": "meta.mapping.key.json string.quoted.double.json",
            "foreground": "var(red)"
        },
        {
            "name": "[JSON] Value",
            "scope": "meta.mapping.value.json string.quoted.double.json",
            "foreground": "var(green)"
        },
        {
            "name": "[JSON] Constant",
            "scope": "constant.language.json",
            "foreground": "var(purple)"
        },
        {
            "name": "[JSON] Character Escape",
            "scope": "constant.character.escape.json",
            "foreground": "var(yellow)"
        },
        {
            "name": "[JSON] Constant Numeric",
            "scope": "constant.numeric.json",
            "foreground": "var(purple)"
        },
        {
            "name": "[JSON] Mapping Level 1",
            "scope": "source.json meta.mapping.value.json meta.mapping.key.json string.quoted.double.json",
            "foreground": "var(yellow)"
        },
        {
            "name": "[JSON] Mapping Level 2",
            "scope": "source.json meta.mapping.value.json meta.mapping.value.json meta.mapping.key.json string.quoted.double.json",
            "foreground": "var(brown)"
        },
        {
            "name": "[Markdown] Deleted",
            "scope": "markup.deleted",
            "foreground": "var(red)"
        },
        {
            "name": "[Markdown] Inserted",
            "scope": "markup.inserted",
            "foreground": "var(green)"
        },
        {
            "name": "[Markdown] Changed",
            "scope": "markup.changed",
            "foreground": "var(blue)"
        },
        {
            "name": "[Markdown] Headings",
            "scope": "markdown.heading,markup.heading | markup.heading entity.name",
            "font_style": "bold",
            "foreground": "var(green)"
        },
        {
            "name": "[Markdown] Links",
            "scope": "string.other.link,markup.underline.link",
            "font_style": "italic",
            "foreground": "var(purple)"
        },
        {
            "name": "[Markdown] Link Description",
            "scope": "entity.name.reference.link.markdown,string.other.link.description.title.markdown,markup.underline.link.image.markdown",
            "foreground": "var(purple)"
        },
        {
            "name": "[Markdown] Link Description",
            "scope": "markup.list.unnumbered.markdown meta.paragraph.list.markdown meta.link.inline.description.markdown,meta.block-level.markdown markup.quote.markdown meta.link.inline.description.markdown,text.html.markdown meta.paragraph.markdown meta.link.inline.description.markdown",
            "foreground": "var(yellow)"
        },
        {
            "name": "[Markdown] Image Inline",
            "scope": "meta.paragraph.markdown meta.link.inline.description.markdown,meta.paragraph.markdown meta.image.inline.description.markdown",
            "foreground": "var(orange)"
        },
        {
            "name": "[Markdown] Bold",
            "scope": "markup.bold",
            "font_style": "bold",
            "foreground": "var(red)"
        },
        {
            "name": "[Markdown] Italic",
            "scope": "markup.italic",
            "font_style": "italic",
            "foreground": "var(red)"
        },
        {
            "name": "[Markdown] Bold & Italic",
            "scope": "markup.italic markup.bold | markup.bold markup.italic",
            "font_style": "bold italic"
        },
        {
            "name": "[Markdown] Numbered List Bullet",
            "scope": "markup.list.numbered.bullet",
            "foreground": "var(green)"
        },
        {
            "name": "[Markdown] Code Inline",
            "scope": "markup.raw.inline",
            "background": "color(var(blue) alpha(0.05))"
        },
        {
            "name": "[Markdown] Code Block",
            "scope": "meta.paragraph.markdown meta.code-fence.definition.begin.text.markdown-gfm,meta.paragraph.markdown meta.code-fence.definition.end.text.markdown-gfm,meta.paragraph.markdown markup.raw.code-fence.markdown-gfm",
            "background": "color(var(blue) alpha(0.05))"
        },
        {
            "name": "[Markdown] Blockquotes",
            "scope": "text.html.markdown meta.block-level.markdown markup.quote.markdown",
            "font_style": "italic"
        },
        {
            "name": "[PHP] Inherited Class",
            "scope": "embedding.php text.html.basic meta.embedded.block.php source.php meta.class.php meta.path.php entity.other.inherited-class.php",
            "foreground": "var(orange)"
        },
        {
            "name": "[PHP] Storage",
            "scope": "storage.modifier.php",
            "foreground": "var(purple)"
        },
        {
            "name": "[PHP] Extends",
            "scope": "storage.modifier.extends.php",
            "foreground": "var(purple)"
        },
        {
            "name": "[PHP] Construct",
            "scope": "support.function.construct.php",
            "foreground": "var(cyan)"
        },
        {
            "name": "[PHP] Echo",
            "scope": "embedding.php text.html.basic meta.embedded.block.php source.php meta.class.php meta.block.php meta.function.php meta.block.php support.function.construct.php",
            "font_style": "normal",
            "foreground": "var(pink)"
        },
        {
            "name": "[PHP] Block",
            "scope": "embedding.php text.html.basic meta.embedded.block.php source.php meta.class.php meta.block.php meta.function.php storage.modifier.php,embedding.php text.html.basic meta.embedded.block.php source.php meta.class.php meta.block.php storage.modifier.php",
            "foreground": "var(purple)"
        },
        {
            "name": "[PHP] Condition",
            "scope": "embedding.php text.html.basic meta.embedded.block.php source.php meta.function.php meta.block.php keyword.control.php",
            "foreground": "var(cyan)"
        },
        {
            "name": "[PHP] Constant",
            "scope": "embedding.php text.html.basic meta.embedded.block.php source.php meta.class.php meta.block.php meta.function.php meta.block.php constant.language.php",
            "foreground": "var(orange)"
        },
        {
            "name": "[Python] Variables",
            "scope": "source.python meta.function.parameters.python variable.parameter.python,source.python meta.function-call.arguments.python variable.parameter.python",
            "foreground": "var(orange)"
        },
        {
            "name": "[Python] Function Arguments",
            "scope": "source.python meta.function-call.arguments.python meta.qualified-name.python meta.generic-name.python",
            "foreground": "var(foreground)"
        },
        {
            "name": "[Python] Statement While",
            "scope": "source.python meta.statement.while.python constant.language.python,source.python constant.language.python",
            "foreground": "var(pink)"
        },
        {
            "name": "[Python] Annotation",
            "scope": "source.python meta.function.parameters.annotation.python meta.qualified-name.python support.type.python",
            "foreground": "var(yellow)"
        },
        {
            "name": "[Python] Print",
            "scope": "source.python keyword.other.print.python,source.python meta.function-call.python meta.qualified-name.python variable.function.python support.function.builtin.python",
            "font_style": "normal",
            "foreground": "var(pink)"
        },
        {
            "name": "[Python] Function Parameters",
            "scope": "source.python meta.item-access.arguments.python meta.qualified-name.python meta.generic-name.python,source.python meta.item-access.arguments.python meta.qualified-name.python support.type.python,source.python meta.function.parameters.annotation.python meta.item-access.arguments.python meta.qualified-name.python support.type.python",
            "foreground": "var(green)"
        },
        {
            "name": "[Python] Generic Name",
            "scope": "source.python meta.function.parameters.annotation.python meta.item-access.arguments.python meta.item-access.python meta.qualified-name.python meta.generic-name.python",
            "foreground": "var(blue)"
        },
        {
            "name": "[Python] Exception",
            "scope": "source.python meta.statement.raise.python meta.function-call.python meta.qualified-name.python variable.function.python support.type.exception.python",
            "foreground": "var(red)"
        },
        {
            "name": "[Python] Function Parameters",
            "scope": "source.python meta.item-access.python meta.qualified-name.python meta.generic-name.python,source.python meta.function.parameters.annotation.python meta.item-access.python meta.qualified-name.python meta.generic-name.python",
            "foreground": "var(yellow)"
        },
        {
            "name": "[SQL] Source",
            "scope": "source.sql",
            "foreground": "var(foreground)"
        },
        {
            "name": "[SQL] Other keywords",
            "scope": "keyword.other.DML.sql",
            "foreground": "var(blue)"
        },
        {
            "name": "[SQL] Function",
            "scope": "support.function.aggregate.sql",
            "foreground": "var(pink)"
        },
        {
            "name": "[JavaScript] Constructor",
            "scope": "source.ts meta.export.default.ts meta.class.ts meta.method.declaration.ts storage.type.ts,meta.function-call.constructor.ts,entity.name.function.constructor.ts,variable.language.constructor.ts",
            "foreground": "var(purple)"
        },
        {
            "name": "[Typescript] Declaration",
            "scope": "source.ts meta.export.default.ts meta.class.ts meta.method.declaration.ts meta.parameters.ts meta.type.annotation.ts entity.name.type.ts,source.ts meta.class.ts meta.method.declaration.ts meta.parameters.ts meta.type.annotation.ts entity.name.type.ts,source.ts meta.export.default.ts meta.class.ts meta.field.declaration.ts meta.type.annotation.ts entity.name.type.ts",
            "foreground": "var(yellow)"
        },
        {
            "name": "[Typescript] Primitive",
            "scope": "support.type.primitive.ts",
            "foreground": "var(pink)"
        },
        {
            "name": "[JavaScript] Try Catch",
            "scope": "keyword.control.trycatch.ts, keyword.control.trycatch.tsx",
            "foreground": "var(cyan)"
        },
        {
            "name": "[JavaScript] Loop",
            "scope": "keyword.control.loop.ts, keyword.control.loop.tsx",
            "foreground": "var(cyan)"
        },
        {
            "name": "[Typescript] Parameters",
            "scope": "source.ts meta.class.ts meta.method.declaration.ts meta.parameters.ts variable.parameter.ts,variable.parameter.function.ts,source.ts meta.export.default.ts meta.class.ts meta.method.declaration.ts meta.parameters.ts variable.parameter.ts",
            "foreground": "var(red)"
        },
        {
            "name": "[Typescript] Object Key",
            "scope": "meta.object-literal.key.ts",
            "foreground": "var(blue)"
        },
        {
            "name": "[Typescript] Dollar",
            "scope": "variable.other.dollar.only.ts",
            "foreground": "var(cyan)"
        },
        {
            "name": "[Typescript] Try Catch",
            "scope": "keyword.control.trycatch.ts",
            "foreground": "var(cyan)"
        },
        {
            "name": "[Typescript] Loop",
            "scope": "keyword.control.loop.ts,source.tsx meta.export.default.tsx meta.class.tsx meta.method.declaration.tsx meta.block.tsx meta.array.literal.tsx keyword.control.as.tsx",
            "foreground": "var(cyan)"
        },
        {
            "name": "[Typescript] Field Declaration",
            "scope": "source.tsx meta.export.default.tsx meta.class.tsx meta.field.declaration.tsx meta.type.annotation.tsx entity.name.type.tsx",
            "foreground": "var(yellow)"
        },
        {
            "name": "[Typescript] Method Declaration",
            "scope": "source.tsx meta.export.default.tsx meta.class.tsx meta.method.declaration.tsx meta.block.tsx meta.function-call.tsx variable.other.object.tsx,source.tsx meta.export.default.tsx meta.class.tsx meta.field.declaration.tsx meta.type.annotation.tsx entity.name.type.module.tsx",
            "foreground": "var(brown)"
        },
        {
            "name": "[Typescript] Object",
            "scope": "source.ts meta.function-call.ts variable.other.object.ts",
            "foreground": "var(yellow)"
        },
        {
            "name": "[INI] - Color for Entity",
            "scope": "source.ini entity,meta.embedded.block.ini,source.ini",
            "foreground": "var(red)"
        },
        {
            "name": "[INI] - Color for Keyword",
            "scope": "source.ini keyword,keyword.other.definition.ini",
            "foreground": "var(purple)"
        },
        {
            "name": "[INI] - Color for Value",
            "scope": "source.ini meta.declaration.ini meta.value.ini string.name.value.ini",
            "foreground": "var(green)"
        },
        {
            "name": "[Markdown] Punctuation inside inline raw",
            "scope": "text.html.markdown meta.block-level.markdown meta.table.markdown-gfm markup.raw.inline.markdown punctuation.definition.raw.end.markdown,text.html.markdown meta.block-level.markdown meta.table.markdown-gfm markup.raw.inline.markdown punctuation.definition.raw.begin.markdown",
            "foreground": "color(var(cyan) alpha(0.8))"
        },
        {
            "name": "[Markdown] - Color for Punctuation — Heading, `Code` and fenced ```code blocks```, **Bold**, _Italic_",
            "scope": "punctuation.definition.raw.begin.markdown,punctuation.definition.raw.end.markdown,punctuation.definition.raw.code-fence.begin.markdown,punctuation.definition.raw.code-fence.end.markdown,punctuation.definition.heading.begin.markdown,punctuation.definition.bold.begin.markdown,punctuation.definition.bold.end.markdown,punctuation.definition.italic.begin.markdown,punctuation.definition.italic.end.markdown",
            "foreground": "color(var(background) blend(var(foreground) 75%))"
        },
        {
            "name": "[SublimeLinter] Error",
            "scope": "sublimelinter.mark.error",
            "foreground": "var(invalid)"
        },
        {
            "name": "[SublimeLinter] Gutter mark",
            "scope": "sublimelinter.gutter-mark",
            "foreground": "var(blue)"
        },
        {
            "name": "[Vue] Function Parameter",
            "scope": "text.html.vue source.js.embedded.html source.js meta.export.js meta.object-literal.js meta.object-literal.js meta.function.declaration.js meta.binding.name.js variable.parameter.function.js",
            "foreground": "var(pink)"
        },
        {
            "name": "[Vue] Object",
            "scope": "text.html.vue source.js.embedded.html source.js meta.export.js meta.object-literal.js meta.object-literal.key.js",
            "foreground": "var(purple)"
        },
        {
            "name": "[Vue] Object Value",
            "scope": "text.html.vue source.js.embedded.html source.js meta.export.js meta.object-literal.js meta.function.js meta.block.js meta.object-literal.js meta.object-literal.js meta.object-literal.key.js",
            "foreground": "var(brown)"
        },
        {
            "name": "Keyword Operator.",
            "scope": "keyword.operator.module",
            "foreground": "var(cyan)"
        },
        {
            "name": "[OVERWRITE] - Function declaration",
            "scope": "meta.function entity.name.function,meta.export.default meta.function-call entity.name.function",
            "font_style": "glow"
        },
        {
            "name": "[OVERWRITE] - Function call",
            "scope": "variable.function",
            "foreground": "var(cyan)",
            "font_style": "glow"
        }
    ]
}